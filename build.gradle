buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url = "http://files.minecraftforge.net/maven" }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'com.selesse:gradle-git-changelog:0.2.+'
    }
}
plugins {
    id "com.github.hierynomus.license" version "0.14.0"
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'com.selesse.git.changelog'

license {
    header rootProject.file('HEADER')
    include "**/*.java"
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    ext.name = 'Horizon Studio'
    ext.email = 'contact@hrznstudio.com'
    ext.mod = 'Titanium'
    ignoreFailures = true
    mapping {
        java='SLASHSTAR_STYLE'
    }
}

def BUILD_NUMBER = System.getenv("BUILD_NUMBER") ?: "0"
version = "0.1.0.$BUILD_NUMBER"
group = "com.hrznstudio"
archivesBaseName = "Titanium"

sourceCompatibility = targetCompatibility = '1.8'
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

def core_plugin = "com.hrznstudio.titanium.core.TitaniumLoader"
minecraft {
    version = "1.12.2-14.23.4.2714"
    runDir = "run"

    mappings = "snapshot_20171003"
    clientJvmArgs = ["-Dfml.coreMods.load=$core_plugin"]
    serverJvmArgs = ["-Dfml.coreMods.load=$core_plugin"]
}

changelog {
    title = "${archivesBaseName} - Changelog"

    outputDirectory = file("$projectDir")

    since = 'beginning'

    commitFormat = '%s (%an)'

    markdown {
        commitFormat = '* %s (%an)'
    }

    includeLines = {
        !it.contains("Merge")
    }

    processLines = {
        String input = it as String
        if (input.contains('[ci skip] ')) {
            input = input.minus('[ci skip] ')
        }
        input
    }
}
task apiJar(type: Jar, dependsOn: 'classes') {
    classifier = 'api'
    from(sourceSets.main.output) {
        include 'com/hrznstudio/titanium/api/**'
    }
    group = 'build'
}

reobf {
    coreJar {mappingType = 'SEARGE'}
}

task coreJar(type: Jar) {
    from(sourceSets.main.output) {
        include 'com/hrznstudio/titanium/core/**'
    }
    manifest {
        attributes "FMLCorePlugin": "$core_plugin"
        attributes 'Maven-Artifact': group+':'+archivesBaseName+':'+version+':core'
    }
    classifier 'core'
    group = 'build'
}

def libPrefix = 'META-INF/libraries'

jar {
    manifest {
        //attributes 'ContainedDeps': libPrefix+'/'+coreJar.archivePath.name
        attributes 'Maven-Artifact': group+':'+archivesBaseName+':'+version
    }
    exclude 'com/hrznstudio/titanium/core/**'
    from(coreJar.archivePath.absolutePath) {
        include "$version-*-core.jar"
        into libPrefix
    }
    classifier = 'all'
}

task baseJar(type: Jar) {
    from(sourceSets.main.output) {
        include 'com/hrznstudio/titanium/base/**'
    }

    classifier = 'base'
}

task cassandraJar(type: Jar) {
    from(sourceSets.main.output) {
        include 'com/hrznstudio/titanium/cassandra/**'
    }
    classifier = 'cassandra'
}

task commodoreJar(type: Jar) {
    from(sourceSets.main.output) {
        include 'com/hrznstudio/titanium/commodore/**'
    }
    classifier = 'commodore'
}

task corporisJar(type: Jar) {
    from(sourceSets.main.output) {
        include 'com/hrznstudio/titanium/corporis/**'
    }
    classifier = 'corporis'
}

task perplexJar(type: Jar) {
    from(sourceSets.main.output) {
        include 'com/hrznstudio/titanium/perplex/**'
    }
    classifier = 'perplex'
}

task nucleusJar(type: Jar) {
    from(sourceSets.main.output) {
        include 'com/hrznstudio/titanium/nucleus/**'
    }
    classifier = 'nucleus'
}

artifacts {
    archives baseJar
    archives cassandraJar
    archives commodoreJar
    archives corporisJar
    archives perplexJar
    archives nucleusJar
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task("uploadJars") {
    description = "uploads JARs"
    if (System.getenv("local_maven") != null) {
        apply plugin: 'maven'
        uploadArchives {
            repositories {
                mavenDeployer {
                    repository(url: "file://" + System.getenv("local_maven"))
                    pom {
                        groupId = project.group
                        version = project.version
                        artifactId = project.archivesBaseName
                        project {
                            name project.archivesBaseName
                            packaging 'jar'
                            description project.archivesBaseName
                            issueManagement {
                                system 'github'
                                url 'https://github.com/HrznStudio/Titanium/issues'
                            }
                            developers {
                                developer {
                                    id 'TheCodedOne'
                                    name 'TheCodedOne'
                                    roles { role 'developer' }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}