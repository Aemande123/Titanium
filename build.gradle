buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url = "https://files.minecraftforge.net/maven" }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    configurations {
        classpath.resolutionStrategy {
            cacheDynamicVersionsFor 10, 'seconds'
            cacheChangingModulesFor 0, 'seconds'
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        //classpath 'com.selesse:gradle-git-changelog:0.2.+'
    }
}
plugins {
    id "com.github.hierynomus.license" version "0.14.0"
}
apply plugin: 'net.minecraftforge.gradle'
//apply plugin: 'com.selesse.git.changelog'
apply plugin: 'eclipse'

license {
    header rootProject.file('HEADER')
    include "**/*.java"
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    ext.name = 'Horizon Studio'
    ext.email = 'contact@hrznstudio.com'
    ext.mod = 'Titanium'
    ignoreFailures = true
    mapping {
        java='SLASHSTAR_STYLE'
    }
}

def BUILD_NUMBER = System.getenv("BUILD_NUMBER") ?: "0"
version = "0.1.0.$BUILD_NUMBER"
group = "com.hrznstudio"
archivesBaseName = "Titanium"

sourceCompatibility = targetCompatibility = '1.8'
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

def core_plugin = "com.hrznstudio.titanium.core.TitaniumLoader"
minecraft {
    mappings channel: 'snapshot', version: '20180921-1.13'
    runConfig {
        name= "Minecraft Client"
        main= "net.minecraftforge.userdev.UserdevLauncher"
        ideaModuleName = "${project.name}_main"
        workingDirectory = project.file("run").canonicalPath
        environment "target", "fmldevclient"
        environment "assetDirectory", downloadAssets.output.absolutePath
        //clientJvmArgs = ["-Dfml.coreMods.load=$core_plugin"] TODO
        //serverJvmArgs = ["-Dfml.coreMods.load=$core_plugin"] TODO
    }

    runConfig {
        name= "Minecraft Server"
        main= "net.minecraftforge.userdev.UserdevLauncher"
        ideaModuleName = "${project.name}_main"
        workingDirectory = project.file("run").canonicalPath
        environment "target", "fmldevserver"
        environment "assetDirectory", downloadAssets.output.absolutePath
    }
}

dependencies {
    minecraft 'net.minecraftforge.test:forge:1.13-24.0.37-1.13-pre'
    //deobfCompile "MCMultiPart2:MCMultiPart:2.5.3"
    //provided "team.chisel.ctm:CTM:MC1.12.2-0.3.2.18"
    //deobfProvided "mezz.jei:jei_1.12.2:4.8.5.138:api"
    //runtime "mezz.jei:jei_1.12.2:4.8.5.138"
    //deobfCompile group: 'mcp.mobius.waila', name: 'Hwyla', version: '1.8.23-B38_1.12'
}
//changelog {
//    title = "${archivesBaseName} - Changelog"
//
//    outputDirectory = file("$projectDir")
//
//    since = 'beginning'
//
//    commitFormat = '%s (%an)'
//
//    markdown {
//        commitFormat = '* %s (%an)'
//    }
//
//    includeLines = {
//        !it.contains("Merge")
//    }
//
//    processLines = {
//        String input = it as String
//        if (input.contains('[ci skip] ')) {
//            input = input.minus('[ci skip] ')
//        }
//        input
//    }
//}
/*
task apiJar(type: Jar, dependsOn: 'classes') {
    classifier = 'api'
    from(sourceSets.main.output) {
        include 'com/hrznstudio/titanium/api/**'
    }
    group = 'build'
}

task coreJar(type: Jar) {
    from(sourceSets.main.output) {
        include 'com/hrznstudio/titanium/core/**'
    }
    manifest {
        attributes "FMLCorePlugin": "$core_plugin"
        attributes 'Maven-Artifact': group+':'+archivesBaseName+':'+version+':core'
    }
    classifier 'core'
    group = 'build'
}*/

def libPrefix = 'META-INF/libraries'

/*
jar {
    manifest {
        attributes 'ContainedDeps': "$libPrefix/$version-*-core.jar"
        attributes 'Maven-Artifact': group+':'+archivesBaseName+':'+version
    }
    exclude 'com/hrznstudio/titanium/core/**'
    from(coreJar.archivePath.absolutePath) {
        include "$version-*-core.jar"
        into libPrefix
    }
    classifier = 'all'
}*/

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property 'version', project.version
    inputs.property 'mcversion', '1.13'

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'META_INF/mods.toml'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion': '1.13'
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'META_INF/mods.toml'
    }
}
